pragma ever-solidity >= 0.61.2;
pragma AbiHeader expire;
pragma AbiHeader pubkey;


contract Supplier {
    uint static _nonce;
    uint static _managerPublicKey;
    uint supplierId;
    address static _owner;
    bool _activated;
    bool _used;
    
  struct Supplier {
        string name;
        string coordinates;
        int id;
        string logoURL;
        string description;
        address supplierAddress;
    }
   mapping(uint => Supplier) suppliers;


    constructor(address sendRemainingGasTo) public {
        tvm.accept();

        setState(_state);

        struct Supplier {
        string name;
        string coordinates;
        int id;
        string logoURL;
        string description;
        address supplierAddress;
    }
    }

    
   function activate() public {
        require(msg.pubkey() == _managerPublicKey, 200);
        tvm.accept();
        _activated = true;
        tvm.rawReserve(0.1e9, 0);
        _owner.transfer({ value: 0, flag: 128, bounce: false });
    }

      function addSupplier(
        string name,
        string coordinates,
        string logoURL,
        string description,
        address supplierAddress
    ) external {
        require(msg.sender == _owner, 201);
        require(_activated && !_used, 202);
        tvm.rawReserve(0.1e9, 0);
        supplierId++;
        suppliers[supplierId] = Supplier(
            name,
            coordinates,
            supplierId,
            logoURL,
            description,
            supplierAddress
        );
        _used = true;
    }

       function getSupplier(uint id) external view returns (
        string name,
        string coordinates,
        int id,
        string logoURL,
        string description,
        address supplierAddress
    ) {
        Supplier storage supplier = suppliers[id];
        return (
            supplier.name,
            supplier.coordinates,
            supplier.id,
            supplier.logoURL,
            supplier.description,
            supplier.supplierAddress
        );
    }


}
